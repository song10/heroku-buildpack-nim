#!/usr/bin/env bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

function arrow() {
  sed -u 's/^/----->  /'
}

function indent() {
  sed -u 's/^/       /'
}

function cat_or() {
  echo $(cat $1 2>/dev/null || echo $2)
}

function export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-'^(NIM_)'}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

BASE_DIR=$PWD
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

NIM_DIR=$CACHE_DIR/Nim
NIM_BIN=$NIM_DIR/bin/nim

NIMBLE_DIR=$CACHE_DIR/.nimble
NIMBLE_BIN=$NIMBLE_DIR/bin/nimble

PATH="$NIM_DIR/bin:$NIMBLE_DIR/bin:$PATH"
export PATH

mkdir -p $HOME/.config/nimble
cat <<EOF > $HOME/.config/nimble/nimble.ini
nimbleDir = r"$NIMBLE_DIR"
EOF

if [ ! -x $NIM_BIN ]; then
    nim_repo=$(cat_or $ENV_DIR/NIM_REPO "git://github.com/nim-lang/Nim.git")
    nim_branch=$(cat_or $ENV_DIR/NIM_BRANCH "master")

    echo "Installing Nim..." | arrow

    git clone --depth 1 --branch $nim_branch $nim_repo $NIM_DIR
    cd $NIM_DIR
    sh build_all.sh

    echo "using ${nim_repo} @${nim_branch}" | indent
fi

if [ ! -x $NIMBLE_BIN ]; then
    echo "Installing Nimble..." | arrow
    nimble_repo=$(cat_or $ENV_DIR/NIMBLE_REPO "git://github.com/nim-lang/nimble.git")
    git clone --depth 1 $nimble_repo $CACHE_DIR/nimble
    cd $CACHE_DIR/nimble
    $NIM_BIN c -r src/nimble install -y
fi

export_env_dir $ENV_DIR

echo "Building app" | arrow
cd $BUILD_DIR
echo "$NIMBLE_BIN --accept build $NIM_BLDFLAGS" | arrow
$NIMBLE_BIN --accept build $NIM_BLDFLAGS
